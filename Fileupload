import { LightningElement } from 'lwc';
import getAccounts from '@salesforce/apex/YourApexClass.getAccounts'; // <-- Update this line

export default class AccountExcelDownload extends LightningElement {
    handleDownload() {
        getAccounts()
            .then(data => {
                if (data && data.length > 0) {
                    this.downloadCSV(data);
                } else {
                    console.warn('No account data returned');
                }
            })
            .catch(error => {
                console.error('Error fetching account data:', error);
            });
    }

    downloadCSV(data) {
        // Get dynamic keys from the first account
        const headers = Object.keys(data[0]);

        // Build CSV content
        let csvContent = headers.join(',') + '\n';

        data.forEach(record => {
            const row = headers.map(field => {
                const val = record[field];
                // Handle undefined/null and escape commas/quotes
                return `"${val !== undefined && val !== null ? String(val).replace(/"/g, '""') : ''}"`;
            });
            csvContent += row.join(',') + '\n';
        });

        // Create a Blob and trigger download
        const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
        const link = document.createElement('a');
        link.href = URL.createObjectURL(blob);
        link.download = 'Accounts.xlsx'; // .csv is technically correct, but Excel opens both
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }
}



public with sharing class AccountOrderDataController {
    @AuraEnabled(cacheable=true)
    public static List<AccountWrapper> getAccountOrderData() {
        List<AccountWrapper> results = new List<AccountWrapper>();
        
        List<Account> accounts = [SELECT Id, Name, 
                                  (SELECT Id, OrderNumber, EffectiveDate, 
                                          (SELECT Id, Quantity, UnitPrice, 
                                                  (SELECT Id, Name, Priority__c 
                                                   FROM OrderLineItemPriorities__r)
                                           FROM OrderItems)
                                   FROM Orders)
                                  FROM Account];
        
        for (Account acc : accounts) {
            for (Order ord : acc.Orders) {
                for (OrderItem item : ord.OrderItems) {
                    for (OrderLineItemPriority__c pri : item.OrderLineItemPriorities__r) {
                        results.add(new AccountWrapper(
                            acc.Name,
                            ord.OrderNumber,
                            ord.EffectiveDate.format(),
                            item.Quantity,
                            item.UnitPrice,
                            pri.Name,
                            pri.Priority__c
                        ));
                    }
                }
            }
        }
        return results;
    }
    // newcode

public with sharing class AccountOrderDataController {
    @AuraEnabled(cacheable=true)
    public static List<AccountWrapper> getAccountOrderData() {
        List<AccountWrapper> results = new List<AccountWrapper>();

        // Step 1: Query all needed data in a flat way
        List<OrderLineItemPriority__c> priorities = [
            SELECT Id, Name, Priority__c,
                   OrderLineItem__r.Id,
                   OrderLineItem__r.Quantity,
                   OrderLineItem__r.UnitPrice,
                   OrderLineItem__r.Order.OrderNumber,
                   OrderLineItem__r.Order.EffectiveDate,
                   OrderLineItem__r.Order.Account.Name
            FROM OrderLineItemPriority__c
        ];

        // Step 2: Flatten and add to wrapper list
        for (OrderLineItemPriority__c pri : priorities) {
            OrderItem item = pri.OrderLineItem__r;
            Order ord = item.Order;
            Account acc = ord.Account;

            results.add(new AccountWrapper(
                acc.Name,
                ord.OrderNumber,
                ord.EffectiveDate.format(),
                item.Quantity,
                item.UnitPrice,
                pri.Name,
                pri.Priority__c
            ));
        }

        return results;
    }

    public class AccountWrapper {
        @AuraEnabled public String AccountName;
        @AuraEnabled public String OrderNumber;
        @AuraEnabled public String OrderDate;
        @AuraEnabled public Decimal Quantity;
        @AuraEnabled public Decimal UnitPrice;
        @AuraEnabled public String PriorityName;
        @AuraEnabled public String PriorityLevel;

        public AccountWrapper(String accName, String ordNum, String ordDate,
                              Decimal qty, Decimal price,
                              String priName, String priLevel) {
            this.AccountName = accName;
            this.OrderNumber = ordNum;
            this.OrderDate = ordDate;
            this.Quantity = qty;
            this.UnitPrice = price;
            this.PriorityName = priName;
            this.PriorityLevel = priLevel;
        }
    }
}

}

