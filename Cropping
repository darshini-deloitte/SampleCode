public with sharing class PSPDeleteRecords implements Database.Batchable<SObject>,System.Schedulable, Database.Stateful {
    
    Boolean deleteFileRecords = false;
    Boolean deleteTransientObject;
    public static String deleteRecordsBatch= 'FilesandTransitentRecordDeletion';

    /**
     * @description execute method for schedule job
     * @param context
     */
    public void execute(SchedulableContext context)
    {
        Database.executeBatch(new PSPDeleteRecords(true));
    }

    public PSPDeleteRecords(Boolean isTransientObject) {
        if (isTransientObject) {
            deleteTransientObject =true;
                } else {
            deleteTransientObject =false;
            deleteFileRecords = true;
        }
    }
    /**
	* @description start method to query records from Transitent object and ContentDocument(Only those files which has appended with delete1_)
    * @param bc	 
    * @return Database.QueryLocator
	*/
    
    public Database.QueryLocator start(Database.BatchableContext bc) {
        if(deleteTransientObject){
            return TransientsSelector.newInstance().selectByTransientIdsToDeleted();
        }else {
            return ContentDocumentsSelector.newInstance().elevatedSelectByTitle();
        }
    }
 /**
	* @description execute method delete the object records
    * @param scope
	*/
    public void execute(Database.BatchableContext bc, List<SObject> scope) {
        try
		{
        if (scope.isEmpty()) {
            return;
        } else {
            deleteScopeData(scope);
        }
    }catch (Exception excp)
    {
        Application.LogEntry.error(excp);
    }
    }
    /**
	* @description Finish method
    * @param bc
	*/

    public void finish(Database.BatchableContext bc) {

       if(!deleteFileRecords){
        PSPDeleteRecords batchJob = new PSPDeleteRecords(false);
        Database.executeBatch(batchJob);
       }  
        
    }

    public void deleteScopeData(List<SObject> dataToDelete)
	{

		fflib_ISObjectUnitOfWork unitOfWork = Application.UnitOfWork.newInstance(new ElevatedContextDML());
		unitOfWork.registerDeleted(dataToDelete);
		unitOfWork.commitWork();
	}

    private without sharing class ElevatedContextDML implements fflib_SObjectUnitOfWork.IDML
	{
        public void dmlInsert(List<SObject> objList){
            insert objList;
        }
		public void dmlUpdate(List<SObject> objList){
            update objList;
        }
		/**
		 * @description delete in elevated context
		 * @param objList
		 */
		public void dmlDelete(List<SObject> objList)
		{
			if (!sflib_ArrayUtils.isNotEmpty(objList))
			{
				return;
			}
			delete objList;
		}

		public void emptyRecycleBin(List<SObject> objList){
            if (objList.isEmpty())
			{
				return;
			}
			Database.emptyRecycleBin(objList);
        }
		public void eventPublish(List<SObject> objList){}
    }


}
